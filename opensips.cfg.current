#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=8
server_signature = yes
server_header = "Server: YulSIP-PBX"
user_agent_header = "User-Agent: YulSIP-PBX"
tcp_max_connections = 4096
tcp_connection_lifetime = 3605
tcp_accept_aliases = no
tcp_connect_timeout = 10
tcp_keepalive = yes
tcp_keepidle = 30

dns = yes
rev_dns = yes
dns_try_ipv6 = no
dns_try_naptr = yes

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
auto_aliases = yes

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no


listen=udp:eth0:5060   # CUSTOMIZE ME
listen=tcp:eth0:5060   # CUSTOMIZE ME
#listen=tls:eth0:5061   # CUSTOMIZE ME

#advertised_address="sbc.yulsip.com"
advertised_address="144.76.42.189"

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 41)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"
modparam("maxfwd", "max_limit", 50)

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### POSTGRESQL module
loadmodule "db_postgres.so"
modparam("db_postgres", "max_db_queries", 7000)
modparam("db_postgres", "exec_query_threshold", 60000)

#### MYSQL module
loadmodule "db_mysql.so"

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8080)

loadmodule "mi_json.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc|uri", "use_domain", 1)

#### PRESENCE modules
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME
modparam("presence_xml", "force_active", 1)
modparam("presence", "fallback2db", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "NAT")
modparam("nathelper", "sipping_from", "sip:pinger@sip.yulsip.com") #CUSTOMIZE ME
modparam("nathelper", "received_avp", "$avp(received_nh)")

#loadmodule "rtpproxy.so"
#modparam("rtpproxy", "rtpproxy_sock", "udp:localhost:12221") # CUSTOMIZE ME

####  DIALPLAN module
loadmodule "dialplan.so"
modparam("dialplan", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

####  DYNAMMIC ROUTING module
loadmodule "drouting.so"
modparam("drouting", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

####  MI_HTTP module
loadmodule "mi_http.so"

#### Pike module
loadmodule "pike.so"
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 30)
modparam("pike", "remove_latency", 130)

#### Ratelimit module
loadmodule "ratelimit.so"
modparam("ratelimit", "timer_interval", 5)
modparam("ratelimit", "limit_per_interval", 1)
modparam("ratelimit", "expire_time", 1800)
modparam("ratelimit", "hash_size", 512)
modparam("ratelimit", "default_algorithm", "RED")
modparam("ratelimit", "repl_buffer_threshold", 500)
modparam("ratelimit", "repl_timer_interval", 100)
modparam("ratelimit", "repl_timer_expire", 10)
modparam("ratelimit", "pipe_replication_cluster", 0)
modparam("ratelimit", "window_size", 5)

#### DISPATCHER module
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_from", "sip:dispatcher@sip.yulsip.com")
modparam("dispatcher", "ds_ping_interval", 10)

#### User Agent Client module
loadmodule "uac_auth.so"
modparam("uac_auth","credential","username:domain:password")
modparam("uac_auth","auth_username_avp", "$avp(user)")
modparam("uac_auth","auth_password_avp", "$avp(pass)")
modparam("uac_auth","auth_realm_avp", "$avp(realm)")
loadmodule "uac.so"
modparam("uac", "force_dialog", yes)
loadmodule "uac_registrant.so"
modparam("uac","restore_mode","auto")
modparam("uac_registrant", "hash_size", 2)
modparam("uac_registrant", "timer_interval", 10)
modparam("uac_registrant", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

#### Fraud Detection module
loadmodule "fraud_detection.so"
modparam("fraud_detection", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME
modparam("fraud_detection", "use_utc_time", 1)
modparam("fraud_detection", "table_name", "fraud_detection")

#### Topology Hiding module
loadmodule "topology_hiding.so"
modparam("topology_hiding", "th_callid_passwd", "XDpH8cwZ2ysbMfWf")
modparam("topology_hiding", "force_dialog", 1)

#### Path module
loadmodule "path.so"
modparam("path", "use_received", 1)
modparam("path", "enable_double_path", 0)

#### Exec module
loadmodule "exec.so"
modparam("exec", "setvars", 1)
modparam("exec", "time_to_kill", 20)

#### Avpops module
loadmodule "avpops.so"
modparam("avpops","db_url","postgres://opensips:H3ll0kamailio2018!!@localhost/opensips")

#### textops module
loadmodule "textops.so"

#### TCP-UDP-TLS proto modules
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
#loadmodule "proto_tls.so"
#loadmodule "tls_mgm.so"
#modparam("tls_mgm","verify_cert", "1")
#modparam("tls_mgm","require_cert", "0")
#modparam("tls_mgm","tls_method", "TLSv1")
#modparam("tls_mgm","certificate", "/usr/local/etc/opensips/tls/user/user-cert.pem")
#modparam("tls_mgm","private_key", "/usr/local/etc/opensips/tls/user/user-privkey.pem")
#modparam("tls_mgm","ca_list", "/usr/local/etc/opensips/tls/user/user-calist.pem")

####  PERMISSIONS module
loadmodule "permissions.so"
modparam("permissions", "db_url", "postgres://opensips:H3ll0kamailio2018!!@localhost/opensips") # CUSTOMIZE ME

#### Regex module
loadmodule "regex.so"

loadmodule "b2b_entities.so"
loadmodule "b2b_logic.so"
 
####### Routing Logic ########

# main request routing logic

route{

route(ANTIFLOOD);

    xlog("L_INFO", "$ci|start|recieved $oP request $rm $ou");
    xlog("L_INFO", "$ci|log|source $si:$sp");
    xlog("L_INFO", "$ci|log|from $fu");
    xlog("L_INFO", "$ci|log|to $tu");

	# initial NAT handling; detect if the request comes from behind a NAT
	# and apply contact fixing

route(NATCHECK);

	if (has_totag()) {
		if (topology_hiding_match()) {
        	xlog("Succesfully matched this request to a topology hiding dialog. \n");
        	xlog("Calller side callid is $ci \n");
        	t_relay();
        	exit;
		} else {
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			if (is_method("SUBSCRIBE") && is_myself("$rd")) {
				# in-dialog subscribe requests
				route(handle_presence);
				exit;
			}
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply("404","Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}


		if (check_route_param("nat=yes")) 
			setflag(NAT);
		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  || is_from_gw() ) ) {
		
		if (is_from_local()) {			
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				send_reply("403","Forbidden auth ID");
				exit;
			}
			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_uri_host_local()) {
				route(INBOUNDCALL);
#				send_reply("403","Relay Forbidden");
#				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

#	# account only INVITEs
#	if (is_method("INVITE|UPDATE")) {
#		
#		# create dialog with timeout
#		if ( !create_dialog("B") ) {
#			send_reply("500","Internal Server Error");
#			exit;
#		}
#		
#		do_accounting("db");
#		
#	}
	
	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n"); 
		
		# if you have some interdomain connections via TLS
		## CUSTOMIZE IF NEEDED
		##if ($rd=="tls_domain1.net"
		## || $rd=="tls_domain2.net"
		##) {
		##	force_send_socket(tls:127.0.0.1:5061); # CUSTOMIZE
		##}
		
		route(relay);
	}

	# requests for my domain
	
	if( is_method("PUBLISH|SUBSCRIBE"))
			route(handle_presence);

	if (is_method("REGISTER")) {
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "0");
			exit;
		}
		xlog("L_INFO", "RESETTING COUNT WHERE IP = $var(ip) AND DOMAIN = $td AND SUBSCRIBER = $tU ");
		avp_db_query("DELETE FROM banlist where ipaddr='$si' and domain='$td' and subscriber='$tU'");

		if (!db_check_to()) {
			send_reply("403","Forbidden auth ID");
			exit;
		}
		if ($proto == "tcp" || $proto == "tls")
			setflag(TCP_PERSISTENT);
		if (isflagset(NAT)) {
			setbflag(SIP_PING_FLAG);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}

	if(is_method("MESSAGE")) {
		lookup("location");
		route(relay);
	}

	route(checkacc);

	if ((is_from_local()) || (ds_is_in_list("$si", "", "1"))) {
		route(dispatcher);
	}
	
	# apply DB based aliases
	alias_db_lookup("dbaliases");

	
	# apply transformations from dialplan table
#	dp_translate("0","$rU/$rU");

	
#	if ($rU=~"^\+[1-9][0-9]+$") {
		
#		if (!do_routing("0")) {
#			send_reply("500","No PSTN Route found");
#			exit;
#		}
		
#		route(relay);
#		exit;
#	}
	 

#	# do lookup with method filtering
#	if (!lookup("location","m")) {
#		if (!db_does_uri_exist()) {
#			send_reply("420","Bad Extension");
#			exit;
#		}
		
		# redirect to a different VM system
#		$du = "sip:127.0.0.2:5060"; # CUSTOMIZE ME
#		route(relay);

#	} 

	if (isbflagset(NAT)) setflag(NAT);

	# when routing via usrloc, log the missed calls also
#	do_accounting("db","missed");
	
#	route(relay);

		send_reply("403","Call Forbidden");
}

route[ANTIFLOOD] {

############ 23.03.2019 Security Update ############
	avp_db_query("select count from banlist where ipaddr='$si' and domain='$td' and subscriber='$tU'", "$avp(count)");
	xlog("L_INFO", "COUNT IS $avp(count) ");
	if($avp(count) > 8) {
		avp_db_query("select reason from banlist where ipaddr='$si' and domain='$td' and subscriber='$tU'", "$avp(reason)");
		xlog("L_INFO", "$ci|end| BANLIST: DROPPING REQUESTS FROM $si . $avp(reason) ");
		sl_send_reply("403","$avp(reason)");
		drop;
		exit;
	}
############ 23.03.2019 Security Update ############

############ 21.03.2019 Security Update ############

    ## CVE-2018-14767
    if($(hdr(To)[1]) != NULL) {
        xlog("L_WARN", "$ci|end|second To header not null - dropping message");
        drop;
    }

    if ($tU == NULL) {
        xlog("L_INFO", "$ci|stop|ignoring subscribe with empty TO username from a $ua\n");
        send_reply("400", "Missing TO username");
        drop;
    }

    if ($fU == NULL) {
        xlog("L_INFO", "$ci|stop|ignoring subscribe with empty FROM username from a $ua\n");
        send_reply("400", "Missing FROM username");
        drop;
    }

############ 21.03.2019 Security Update ############
    
#	if ($rd =~ "[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3}\.[0-9]{1,3}") {
#        xlog("L_WARN", "$ci|end|dropping $rm request with IP domain\n");
#        drop();
#        exit();
#    }

	if(is_method("REGISTER|INVITE")) {
	    if ($td =~ "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})") {
			if (ds_is_in_list("$si", "", "1")){
				return();
			}
			else
			if ( check_source_address("1","$avp(trunk_attrs)") ) {
				return();
			} 
			else 
			if ( is_from_gw() ) {
				return();
			} 
			else 
			avp_db_query("select binding_uri from registrant where did_num='$oU'", "$avp(request_uri)");
			if ($avp(request_uri) == $ou) {
				return();
			} 
	    xlog("L_WARN", "$ci|end|dropping request with IP domain in To header\n");
    	drop();
	    exit;
		}
	}

	if ($ua == "friendly-scanner" ||
		$ua == "sundayddr" ||
    	$ua == "pplsip" ||
    	$ua =~ "NiceGuy" ||
    	$ua =~ "sipcli" ||
		$ua =~ "VaxSIPUserAgent" ||
		$ua =~ "sipcli/v" ||
		$ua =~ "sipvicious" ||
		$ua =~ "iWar" ||
		$ua =~ "sip-scan" ||
		$ua =~ "hinet.net" ||
		$ua =~ "pplsip" ||
		$ua =~ "fdgddfg546df4g8d5f" ||
		$ua =~ "Vicidial" ||
		$ua =~ "srdfchgvm" ||
		$ua =~ "PCrNYocI" ||
		$ua =~ "assddfgghh" ||
		$ua =~ "gaf") {
    		xlog("L_WARN", "$ci|end|dropping message with user-agent $ua from $si:$sp\n");
			drop();
    		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		xlog("L_WARN", "$ci|end|to many hops");
		send_reply("483","Too Many Hops");
		exit;
	}

    if ($ml >=  4096 ) {
		xlog("L_WARN", "$ci|end|Big message received from $Au $si:$sp\n");
        sl_send_reply("513", "Message too big");
        drop();
		exit; 
    }

	if (!pike_check_req()) { 
		xlog("L_WARN", "$ci|end|request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
		drop();
		exit; 
	};

	if (is_present_hf("Proxy-Authorization") &&
    $ar =~ "[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3}\.[0-9]{1,3}" ) {
		xlog("L_WARN", "$ci|end|dropping request with IP domain in Proxy-Authorization header\n");
		drop();
		exit;
    }


############ 23.03.2019 Security Update ############
	if(is_method("REGISTER") && is_myself("$rd")) {
		$var(ip) = $si ;
		avp_db_query("select count from banlist where ipaddr='$si' and domain='$td' and subscriber='$tU'", "$avp(count)");
		xlog("L_INFO", "COUNT = $avp(count)");
		if(($avp(count) == 8) || ($avp(count) > 8)) {
			avp_db_query("UPDATE banlist SET blocked='yes', reason='Blocked. Bruteforce Detected. Contact support.' WHERE ipaddr='$si' and domain='$td' and subscriber='$tU'");
			xlog("L_INFO", "$ci|end| Bruteforce attack detected from $si to user $tu . IP added to banlist");
			sl_send_reply("403","Bruteforce Detected");
			drop;
			exit;
		}
		else 
		if ($avp(count) == NULL) {
			$avp(count) = 0 ;
			$avp(count) = $avp(count) + 1 ;
			avp_db_query("INSERT INTO banlist (ipaddr, count, domain, subscriber, blocked, reason) VALUES ('$si', '$avp(count)', '$td', '$tU', 'no', '')");
		}
		else 
		if($avp(count) > 0) {
			xlog("L_INFO", "COUNT = $avp(count)");
			$avp(count2) = $avp(count) + 1 ;
			xlog("L_INFO", "COUNT UPDATING TO $avp(count)");
			avp_db_query("UPDATE banlist SET count='$avp(count2)' WHERE ipaddr='$si' AND domain='$td' AND subscriber='$tU'");
		}
	}
############ 23.03.2019 Security Update ############

}

route[NATCHECK] {
	force_rport();
	if (nat_uac_test("23")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
			setbflag(NAT);
		} 
		else 
        ## YulSIP-1846: Cisco SPA8000 freaks out on options pings
        if (!($ua =~ "Linksys/SPA8000"
             || $ua =~ "OpenBTS"
             || $ua =~ "SIPp"
#             || (af==INET6)
            )) {
            setbflag(NAT);
        }
		else 
		if (has_body("application/sdp") && nat_uac_test("8")) {
        	xlog("L_INFO", "$ci|log|SDP contains a RFC1918 address");
        	# alters the SDP information in order to facilitate NAT traversal.
        	# 2. rewrite media IP address (c=) with source IP
        	# 8. rewrite IP from origin description (o=) with source IP
       	fix_nated_sdp("10");
			setbflag(NAT); 
		} 
		else 
		{
			fix_nated_contact();
			setbflag(NAT);
		}
	}
}

route[INBOUNDCALL] {
	if(is_method("INVITE")) {
		if (ds_is_in_list("$si", "", "1")){
			return();
		}
		else
		if ( check_source_address("1","$avp(trunk_attrs)") ) {
			create_dialog();
			create_dialog("Pp");
			# request comes from trunks
			xlog("L_INFO","INBOUND CALL SOURSE TRUNK. IP = $si AND $oU ");
			if ( !ds_select_dst("1","4") ) {
				send_reply("500","No Destination available");
				exit;
			}
			t_on_failure("GW_FAILOVER");
		setflag(NAT);
		add_path_received();
		route(relay);
		} else if ( is_from_gw() ) {
			xlog("L_INFO","INBOUND CALL SOURSE GATEWAY. IP = $si AND $oU ");
			create_dialog();
			create_dialog("Pp");
			if ( !ds_select_dst("1","4") ) {
				send_reply("500","No Destination available");
				exit;
			}
		t_on_failure("GW_FAILOVER");
		setflag(NAT);
		add_path_received();
		route(relay);
		} else {
		avp_db_query("select binding_uri from registrant where did_num='$oU'", "$avp(request_uri)");
		xlog("L_INFO","INBOUND CALL SOURSE IP = $si AND request_uri = $ou ");
		if ($avp(request_uri) == $ou) {
			create_dialog();
			create_dialog("Pp");
			if ( !ds_select_dst("1","4") ) {
				send_reply("500","No Destination available");
				exit;
			}
		t_on_failure("GW_FAILOVER");
		setflag(NAT);
		add_path_received();
		route(relay);
		}
		else
		send_reply("403","Forbidden");
		exit;
		}
	}
}
failure_route[GW_FAILOVER] {
	if (t_was_cancelled()) {
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("(408)|([56][0-9][0-9])")) {
		xlog("Failed trunk $rd/$du detected \n");

		
		if ( ds_next_dst() ) {
		
			t_on_failure("GW_FAILOVER");
			t_relay();
			exit;
		}
		
		send_reply("500","All GW are down");
	}
}

route[checkacc] {
	avp_db_query("SELECT blocked FROM domain WHERE domain='$td'", "$avp(blocked)");
	if( $avp(blocked) == 1 ) {
		xlog("L_INFO","ACCOUNT IS BLOCKED!!!!!  blocked = $avp(blocked) ");
		avp_db_query("SELECT fraud FROM domain WHERE domain='$td' AND blocked='1'", "$avp(fraudcalls)");
		if( $avp(fraudcalls) == 1 ) {
			$ru = "sip:" + "fraudcalls" + "@" + "sip.yulsip.com" ;
		}
		else
		avp_db_query("SELECT unpaid FROM domain WHERE domain='$td' AND blocked='1'", "$avp(unpaid)");
		if( $avp(unpaid) == 1 ) {
			$ru = "sip:" + 'fraudcalls' + "@" + 'sip.yulsip.com';
			uac_replace_to("sip:$rU@$avp(host)");
		}
		else
		avp_db_query("SELECT other FROM domain WHERE domain='$td' AND blocked='1'", "$avp(other)");
		if( $avp(other) == 1 ) {
			$ru = "sip:" + 'fraudcalls' + "@" + 'sip.yulsip.com';
			uac_replace_to("sip:$rU@$avp(host)");
		}
	}
}

route[dispatcher] {
	if(ds_is_in_list("$si", "", "1")) { 
		if(pcre_match("$rU", "^\d{7}$$")){
			xlog("L_INFO", "RURI username matches local made regex");
			xlog("DISPATCH: Dialing to $rU from client $rd . This is external call");
			route(PSTN);
		}
		if(pcre_match("$rU", "^(\+7|7|8)\d{10}$$")){
			xlog("L_INFO", "RURI username matches RU made regex");
			xlog("DISPATCH: Dialing to $rU from client $rd . This is external call");
			if(pcre_match("$rU", "^(\+7)\d{10}$$")){
				strip(1);
				prefix("810");
			}
			route(PSTN);
		}
		if(pcre_match("$rU", "^(\810)\d+$$")){
			xlog("L_INFO", "RURI username matches RU International made regex");
			xlog("DISPATCH: Dialing to $rU from client $rd . This is external call");
			route(PSTN);
		}
		if(pcre_match("$rU", "^(\+|00)\d+$$")){
			xlog("L_INFO", "RURI username matches RU International made regex");
			xlog("DISPATCH: Dialing to $rU from client $rd . This is external call");
			if(pcre_match("$rU", "^(\+)\d+$$")){
				strip(1);
				prefix("00");
			}
			route(PSTN);
		}
		do_accounting("db","missed","acc");
		if (is_myself("$rd")) {
			if (!lookup("location","m")) {
				if (!db_does_uri_exist()) {
					send_reply("420","Bad Extension");
					exit;
				}
			t_newtran();
			t_reply("404", "Not Found");
			exit;
			}
#		setflag(NAT);
		append_hf("P-hint: internal\r\n");
		create_dialog();
		create_dialog("Pp");
		topology_hiding("UC");
####	from and RPID header fix		####
		avp_db_query("SELECT callidname FROM subscriber WHERE username='$fU' AND domain='$td'", "$avp(callidname)");
		xlog("L_INFO","CallerID name is $avp(callidname)");
		uac_replace_from("$avp(callidname)", "sip:$fU@$td");
		remove_hf("X-FS-Support");
		remove_hf("Remote-Party-ID");
		append_hf("Remote-Party-ID: $avp(callidname) <sip:$fU@$td>;party=calling;privacy=off;screen=yes\r\n");
####	end		####
		route(relay);
		exit;
		}
	}

	$var(ipaddr) = $si ;
	if ( !ds_select_dst("1","4") ) {
		send_reply("500","No Destination available");
		exit;
	}
	t_on_failure("GW_FAILOVER");
#	setflag(NAT);
	route(relay);
}

route [PSTN] {
	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}
	xlog("Cheking traffic for Fraud");
	check_fraud("$fU", "$rU", "1");
	if ($rc < 0) {
		xlog("L_WARN", "Fraud detected for user $fU rc=$rc\n to dest $tU and client $td");
		exec_dset("/etc/opensips/fraudmail.sh '$fU' '$tU' '$td' '$rc'");
		exec_dset("cat /etc/opensips/fraudmail.txt | ssmtp dzakharov@yulsip.com");
		exec_dset("cat /etc/opensips/fraudmail.txt | ssmtp support@yulsip.com");
		exec_dset("cat /etc/opensips/fraudmail.txt | ssmtp p.kulikov@std-tele.ru");
		exec_dset("cat /etc/opensips/fraudmail.txt | ssmtp 79639105778@yandex.ru");
		avp_db_query("INSERT INTO banlist (ipaddr, count, domain, subscriber, blocked, reason) VALUES ('$var(ipaddr)', '8', '$td', '$fU', 'yes', 'Fraud Calls Detected. Contact support.')");
		avp_db_query("UPDATE domain SET blocked='1' WHERE domain='$td'");
		avp_db_query("UPDATE domain SET fraud='1' WHERE domain='$td'");
		t_reply("403","Fraud Detected");
		drop();
		exit;
	}
	avp_db_query("select trunk_id from directions where from_user='$fU' and from_domain='$td'", "$avp(trunk_id)");
	xlog("L_WARN", "TRUNK ID IS $avp(trunk_id) ");
	avp_db_query("select host from registrant where id='$avp(trunk_id)' and clientdomain='$td'", "$avp(host)");
	avp_db_query("select username from registrant where id='$avp(trunk_id)' and host='$avp(host)'", "$avp(user)");
	avp_db_query("select password from registrant where id='$avp(trunk_id)' and clientdomain='$td'", "$avp(pass)");
	avp_db_query("select hideid from registrant where id='$avp(trunk_id)' and clientdomain='$td'", "$avp(hideid)");
	xlog("L_INFO", "HIDE HOST = $avp(hideid) ");
	dp_translate("0","$rU/$rU");
	$ru = "sip:" + $rU + "@" + $avp(host);
	uac_replace_from("$avp(user)", "sip:$avp(user)@$avp(host)");
	uac_replace_to("sip:$rU@$avp(host)");
	if ( $avp(hideid) == '1' ) {
		append_hf("Privacy: id\r\n");
#		$fn = "Anonymous";
	}
	remove_hf("X-FS-Support");
	remove_hf("Remote-Party-ID");
	append_hf("Remote-Party-ID: $avp(user) <sip:$avp(user)@$td>;party=calling;privacy=on;screen=yes\r\n");
	create_dialog();
	create_dialog("Pp");
	topology_hiding("UC");
	route(relay);
	exit;
}

route[relay] {

	if(is_method("MESSAGE")) {
		lookup("location");
		t_relay();
	}
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		
#		if (isflagset(NAT)) {
#			rtpproxy_offer("ro");
#		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}


# Presence route
route[handle_presence]
{
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
	} else
	if( is_method("SUBSCRIBE")) {
		handle_subscribe();
	}

	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	if (nat_uac_test("1"))
		fix_nated_contact();
#	if ( isflagset(NAT) )
#		rtpproxy_answer("ro");
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

    if (t_check_status("401")) {
		xlog("L_NOTICE", "PSTN: Remote asked for authentication");
		$avp(www) = $(<reply>hdr(WWW-Authenticate));
		avp_subst("$avp(www)", "/Digest\s//");
# Get the realm from the www-auth header
		$var(numkvp) = $(avp(www){csv.count});
		$var(i) = 0;
		while($var(i) < $var(numkvp)) {
			$var(temp) = $(avp(www){s.select,$var(i),,});
			if ($var(temp) =~ "realm.*") {
				$avp(authrealm) = $var(temp);
				avp_subst("$avp(authrealm)","/(realm=\")(.*)(\")/\2/");
			}
		$var(i) = $var(i) + 1;
		xlog("L_NOTICE","[$ci] AUTHREALM IS $avp(authrealm)");
		}
		$avp(realm) = $avp(authrealm) ;
    	uac_auth();
		t_relay();
#		b2b_init_request("top hiding");
		xlog("L_NOTICE","PSTN: UAC AUTH sended");
		exit;
    }
	if (t_check_status("407")) {
		$avp(www) = $(<reply>hdr(Proxy-Authenticate));
		avp_subst("$avp(www)", "/Digest\s//");
# Get the realm from the www-auth header
		$var(numkvp) = $(avp(www){csv.count});
		$var(i) = 0;
		while($var(i) < $var(numkvp)) {
			$var(temp) = $(avp(www){s.select,$var(i),,});
			if ($var(temp) =~ "realm.*") {
				$avp(authrealm) = $var(temp);
				avp_subst("$avp(authrealm)","/(realm=\")(.*)(\")/\2/");
			}	
		$var(i) = $var(i) + 1;
		xlog("L_NOTICE","[$ci] AUTHREALM IS $avp(authrealm)");
		}
		$avp(realm) = $avp(authrealm) ;
    	uac_auth();
		t_relay();
#		b2b_init_request("top hiding");
		xlog("L_NOTICE","PSTN: UAC AUTH sended");
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	
	# redirect the failed to a different VM system
#		if (t_check_status("486|408")) {
#		$du = "sip:127.0.0.2:5060"; # CUSTOMIZE ME
		# do not set the missed call flag again
#		route(relay);
#	}
}



local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}
